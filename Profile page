import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { Input } from "@/components/ui/input";
import { Star } from "lucide-react";
import { DndContext, closestCenter } from "@dnd-kit/core";
import { SortableContext, arrayMove, useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";

const ProfilePage = () => {
  const [username, setUsername] = useState("User123");
  const [profilePic, setProfilePic] = useState("/default-avatar.png");
  const [watchlist, setWatchlist] = useState([
    { id: 1, title: "Inception" },
    { id: 2, title: "Interstellar" },
    { id: 3, title: "The Dark Knight" },
  ]);
  const [ratedMovies, setRatedMovies] = useState([
    { id: 1, title: "Inception", rating: 5 },
    { id: 2, title: "Interstellar", rating: 4 },
  ]);

  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (active.id !== over.id) {
      setWatchlist((items) => {
        const oldIndex = items.findIndex((item) => item.id === active.id);
        const newIndex = items.findIndex((item) => item.id === over.id);
        return arrayMove(items, oldIndex, newIndex);
      });
    }
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <Card className="p-4 mb-6 flex items-center space-x-4">
        <Avatar>
          <AvatarImage src={profilePic} alt="Profile" />
          <AvatarFallback>U</AvatarFallback>
        </Avatar>
        <Input
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          className="max-w-xs"
        />
        <Button>Save Changes</Button>
      </Card>

      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
        <h2 className="text-xl font-bold mb-4">Watchlist</h2>
        <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
          <SortableContext items={watchlist.map((item) => item.id)}>
            {watchlist.map((movie) => (
              <SortableItem key={movie.id} movie={movie} />
            ))}
          </SortableContext>
        </DndContext>
      </motion.div>

      <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>
        <h2 className="text-xl font-bold mt-6 mb-4">Rated Movies</h2>
        {ratedMovies.map((movie) => (
          <Card key={movie.id} className="p-4 flex items-center justify-between">
            <span>{movie.title}</span>
            <div className="flex space-x-1">
              {[...Array(5)].map((_, i) => (
                <Star
                  key={i}
                  className={`cursor-pointer ${i < movie.rating ? "text-yellow-500" : "text-gray-400"}`}
                  onClick={() =>
                    setRatedMovies((prev) =>
                      prev.map((m) =>
                        m.id === movie.id ? { ...m, rating: i + 1 } : m
                      )
                    )
                  }
                />
              ))}
            </div>
          </Card>
        ))}
      </motion.div>
    </div>
  );
};

const SortableItem = ({ movie }) => {
  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: movie.id });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition,
  };
  return (
    <Card ref={setNodeRef} style={style} {...attributes} {...listeners} className="p-4 mb-2 cursor-grab">
      {movie.title}
    </Card>
  );
};

export default ProfilePage;
